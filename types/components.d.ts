/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
export namespace Components {
    interface LidsCard {
    }
    interface LidsIcon {
        "height": string;
        "name": string;
        "width": string;
    }
    interface LidsLoader {
        /**
          * Define if the component is visible or not.
          * @type {boolean}
          * @memberof Loader
         */
        "concealed": boolean;
    }
    interface LidsMasthead {
    }
    interface LidsOption {
        "selected": boolean;
        "value": string;
    }
    interface LidsPill {
    }
    interface LidsSearchbar {
        /**
          * The placeholder to use for the input field.
          * @type {string}
          * @memberof Searchbar
         */
        "placeholder": string;
    }
    interface LidsSelect {
        /**
          * The current value of the element.
          * @type {string}
          * @memberof Select
         */
        "value": string;
    }
    interface LidsSwitch {
        /**
          * Specify the element should be pre-selected.
          * @type {boolean}
          * @memberof Switch
         */
        "checked": boolean;
        /**
          * Define the shape of the toggle switch.
          * @type {boolean}
          * @memberof Switch
         */
        "rounded": boolean;
    }
}
declare global {
    interface HTMLLidsCardElement extends Components.LidsCard, HTMLStencilElement {
    }
    var HTMLLidsCardElement: {
        prototype: HTMLLidsCardElement;
        new (): HTMLLidsCardElement;
    };
    interface HTMLLidsIconElement extends Components.LidsIcon, HTMLStencilElement {
    }
    var HTMLLidsIconElement: {
        prototype: HTMLLidsIconElement;
        new (): HTMLLidsIconElement;
    };
    interface HTMLLidsLoaderElement extends Components.LidsLoader, HTMLStencilElement {
    }
    var HTMLLidsLoaderElement: {
        prototype: HTMLLidsLoaderElement;
        new (): HTMLLidsLoaderElement;
    };
    interface HTMLLidsMastheadElement extends Components.LidsMasthead, HTMLStencilElement {
    }
    var HTMLLidsMastheadElement: {
        prototype: HTMLLidsMastheadElement;
        new (): HTMLLidsMastheadElement;
    };
    interface HTMLLidsOptionElement extends Components.LidsOption, HTMLStencilElement {
    }
    var HTMLLidsOptionElement: {
        prototype: HTMLLidsOptionElement;
        new (): HTMLLidsOptionElement;
    };
    interface HTMLLidsPillElement extends Components.LidsPill, HTMLStencilElement {
    }
    var HTMLLidsPillElement: {
        prototype: HTMLLidsPillElement;
        new (): HTMLLidsPillElement;
    };
    interface HTMLLidsSearchbarElement extends Components.LidsSearchbar, HTMLStencilElement {
    }
    var HTMLLidsSearchbarElement: {
        prototype: HTMLLidsSearchbarElement;
        new (): HTMLLidsSearchbarElement;
    };
    interface HTMLLidsSelectElement extends Components.LidsSelect, HTMLStencilElement {
    }
    var HTMLLidsSelectElement: {
        prototype: HTMLLidsSelectElement;
        new (): HTMLLidsSelectElement;
    };
    interface HTMLLidsSwitchElement extends Components.LidsSwitch, HTMLStencilElement {
    }
    var HTMLLidsSwitchElement: {
        prototype: HTMLLidsSwitchElement;
        new (): HTMLLidsSwitchElement;
    };
    interface HTMLElementTagNameMap {
        "lids-card": HTMLLidsCardElement;
        "lids-icon": HTMLLidsIconElement;
        "lids-loader": HTMLLidsLoaderElement;
        "lids-masthead": HTMLLidsMastheadElement;
        "lids-option": HTMLLidsOptionElement;
        "lids-pill": HTMLLidsPillElement;
        "lids-searchbar": HTMLLidsSearchbarElement;
        "lids-select": HTMLLidsSelectElement;
        "lids-switch": HTMLLidsSwitchElement;
    }
}
declare namespace LocalJSX {
    interface LidsCard {
    }
    interface LidsIcon {
        "height"?: string;
        "name"?: string;
        "width"?: string;
    }
    interface LidsLoader {
        /**
          * Define if the component is visible or not.
          * @type {boolean}
          * @memberof Loader
         */
        "concealed"?: boolean;
    }
    interface LidsMasthead {
    }
    interface LidsOption {
        "selected"?: boolean;
        "value"?: string;
    }
    interface LidsPill {
    }
    interface LidsSearchbar {
        /**
          * Custom event dispatching the value of the input on submission.
          * @type {EventEmitter<string>}
          * @memberof Searchbar
         */
        "onOnsubmit"?: (event: CustomEvent<string>) => void;
        /**
          * The placeholder to use for the input field.
          * @type {string}
          * @memberof Searchbar
         */
        "placeholder"?: string;
    }
    interface LidsSelect {
        /**
          * Custom event dispatching the value of the select on submission.
          * @type {EventEmitter<string>}
          * @memberof Select
         */
        "onOnchange"?: (event: CustomEvent<string>) => void;
        /**
          * The current value of the element.
          * @type {string}
          * @memberof Select
         */
        "value"?: string;
    }
    interface LidsSwitch {
        /**
          * Specify the element should be pre-selected.
          * @type {boolean}
          * @memberof Switch
         */
        "checked"?: boolean;
        /**
          * Custom event dispatching the value of the input on submission.
          * @type {EventEmitter<{ checked: boolean }>}
          * @memberof Switch
         */
        "onOnchange"?: (event: CustomEvent<{ checked: boolean }>) => void;
        /**
          * Define the shape of the toggle switch.
          * @type {boolean}
          * @memberof Switch
         */
        "rounded"?: boolean;
    }
    interface IntrinsicElements {
        "lids-card": LidsCard;
        "lids-icon": LidsIcon;
        "lids-loader": LidsLoader;
        "lids-masthead": LidsMasthead;
        "lids-option": LidsOption;
        "lids-pill": LidsPill;
        "lids-searchbar": LidsSearchbar;
        "lids-select": LidsSelect;
        "lids-switch": LidsSwitch;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "lids-card": LocalJSX.LidsCard & JSXBase.HTMLAttributes<HTMLLidsCardElement>;
            "lids-icon": LocalJSX.LidsIcon & JSXBase.HTMLAttributes<HTMLLidsIconElement>;
            "lids-loader": LocalJSX.LidsLoader & JSXBase.HTMLAttributes<HTMLLidsLoaderElement>;
            "lids-masthead": LocalJSX.LidsMasthead & JSXBase.HTMLAttributes<HTMLLidsMastheadElement>;
            "lids-option": LocalJSX.LidsOption & JSXBase.HTMLAttributes<HTMLLidsOptionElement>;
            "lids-pill": LocalJSX.LidsPill & JSXBase.HTMLAttributes<HTMLLidsPillElement>;
            "lids-searchbar": LocalJSX.LidsSearchbar & JSXBase.HTMLAttributes<HTMLLidsSearchbarElement>;
            "lids-select": LocalJSX.LidsSelect & JSXBase.HTMLAttributes<HTMLLidsSelectElement>;
            "lids-switch": LocalJSX.LidsSwitch & JSXBase.HTMLAttributes<HTMLLidsSwitchElement>;
        }
    }
}
